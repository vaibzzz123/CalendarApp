have array of events posted so far, in the tuple format
have array of divs that hold the event, and their width, etc.

when inserting new event:
* find overlapping events in array one
* if there are overlapping events:
    * go into array2. resize those events to take up half space to the left
    * insert new event into array1
    * insert new event into array2, resizing so it takes up the right side portion
* otherwise
    * insert into array1
    * insert into array2, taking maximum width of container

actually nah that hasn't worked

new approach: levels, divs inside the calendarContainer div

* Will start with 1 level, and will have a max level counter
* look for all overlapping elements, sort them by level (will have element, level tuple)
* find first level where I can insert such that the elements don't overlap at that particular level
* if level doesn't exist, create it, increment counter
* if there are overlapping elements on
    * split them into before currentLevel and after currentLevel
    * Find closest levels of overlapping elements (before and after), width = (closestAfter-closestBefore)/closestAfter * maxWidth (set to maxLevel and 1 respectively at start of search)
    * resize all elements that are overlapping to (newLevels-1/newLevels)*width

OR

do the non-overlapping intervals problem
    * remove all items from the calendar if required
    * find all intervals in the set such that removing them gets rid of overlap, put remaining intervals into one level
    * repeat the same process for the removed intervals, until there are none
    * these will be our levels

in summary:

1. figure out optimal layout from doing non-overlapping intervals problem
2. for every element (starting from first level)
    2.1 increment maxLevels if required. and insert new div for level
    2.2 create new element
    2.3 check for overlap with all elements on PREVIOUS level only (is it actually all overlaps?)
    2.4 if there is:
        2.4.1 for every element in overlap
            2.4.1.1 resize their width to currentWidth * (maxLevels-1/maxLevels)
            2.4.1.2 recursively repeat for every element in their overlap (that's of lower level) (might not be necessary)
    2.5 take maxWidth/level for width of new element, insert into specified level
